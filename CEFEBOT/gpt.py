import os
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import google.generativeai as genai
import logging
import requests
import speech_recognition as sr
import re
import io
import wave
import audioop
from threading import Lock
from time import time, sleep
import sys
import tempfile
import subprocess

# Configura√ß√£o da API do Gemini - usando vari√°veis de ambiente
#API_KEY = os.getenv("GEMINI_API_KEY", "")
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")
chat = model.start_chat(history=[])

# Credenciais do Twilio - usando vari√°veis de ambiente
#TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "")
#TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "")

# Controle de taxa: 15 requisi√ß√µes por minuto
lock = Lock()
timestamps = []

def throttle():
    """Garante no m√°ximo 15 requisi√ß√µes em qualquer janela de 60 segundos."""
    with lock:
        agora = time()
        while timestamps and agora - timestamps[0] > 60:
            timestamps.pop(0)
        if len(timestamps) >= 15:
            time_to_wait = 60 - (agora - timestamps[0])
            sleep(time_to_wait)
            agora = time()
            while timestamps and agora - timestamps[0] > 60:
                timestamps.pop(0)
        timestamps.append(agora)

# Mensagens de erro
MENSAGEM_ERRO_TEXTO = (
    "N√£o entendi sua pergunta, voc√™ pode ter se expressado mal ou eu n√£o tenho essas informa√ß√µes "
    "salvas em meu banco de dados. Pode reformular? (Caso n√£o seja um erro, entre em contato com a "
    "SERAC pelo email: serac.mariadagraca@cefet-rj.br)"
)
MENSAGEM_ERRO_AUDIO = "N√£o entendi seu audio, poderia mandar de novo ou falar via texto?"
MENSAGEM_NAO_CONHECIMENTO = "N√£o tenho ainda essa informa√ß√£o, favor falar com a SERAC (email: serac.mariadagraca@cefet-rj.br)"
MENSAGEM_ERRO_SISTEMA = "Mil perd√µes! O sistema enfrentou uma falha. Caso continue, favor falar com a SERAC (email: serac.mariadagraca@cefet-rj.br)"
MENSAGEM_ERRO_TRANSCRICAO = "Mil perd√µes! O sistema de reconhecimento de audio enfrentou uma falha. Caso continue, favor falar com a SERAC (email: serac.mariadagraca@cefet-rj.br)"


# Banco de dados completo
COLEGIO_INFO = {
    "nome da escola": "CEFET-RJ Uned Maria da Gra√ßa",
    "nome": "CEFETBOT",
    "Para qual Feira voc√™ foi criado":"Fui criado para disputar na EXPOTEC (Exposi√ß√£o do Ensino T√©cnico) de 2025.",
    "Quem sou eu": "Eu sou um BOT de atendimento da escola",
    "criadores": (
        "Fui criado pelos alunos Davi Corvello, Pedro Lukas e Pedro Oliveira, alunos do terceiro ano de automa√ß√£o industrial de 2025. "
        "Fui supervisionado pelos professores Leandro Samyn (orientador) e Arcano (coorientador)"
    ),
    "fundacao": "2010",
    "Uso de uniforme/cal√ßa jeans": "Obrigat√≥rio",
    "Cor do uniforme": "Azul e Branco",
    "tipo": "P√∫blica",
    "est√°gio": "Obrigat√≥rio para obter o diploma",
    "forma√ß√£o": "Apenas se √© poss√≠vel obter o diploma se formando tanto no t√©cnico quanto no ensino m√©dio OBRIGATORIAMENTE EM AMBOS",
    "endere√ßo": "Rua Miguel √Çngelo, 96 - Maria da Gra√ßa, Rio de Janeiro - RJ, 20785-220",
    "nacionalidade": "Escola Brasileira",
    "email da Se√ß√£o de Articula√ß√£o Pedag√≥gica (SERAC)": "serac.mariadagraca@cefet-rj.br",
    "site": "https://www.cefet-rj.br/index.php/campus-maria-da-graca",
    "diretor": "Prof. Saulo",
    "niveis": ["Ensino M√©dio T√©cnico", "Ensino T√©cnico subsequente", "Bacharelado"],
    "horarios": [
        "Majoritariamente Matutinos (com contraturno √† tarde): Produ√ß√£o Cultural e Automa√ß√£o Industrial (Ensino M√©dio T√©cnico)",
        "Majoritariamente Vespertinos (com contraturno de manh√£): Seguran√ßa do Trabalho e Manuten√ß√£o Automotiva (Ensino M√©dio T√©cnico)",
        "Noturnos: Bacharelado em Sistemas de Informa√ß√£o e Cursos T√©cnicos Subsequentes em Seguran√ßa do Trabalho e Sistemas de Energias Renov√°veis"
    ],
    "diferenciais": [
        "Laborat√≥rios equipados de ci√™ncias, inform√°tica e rob√≥tica",
        "Biblioteca",
        "Quadra poliesportiva coberta",
        "Ensino de L√≠nguas",
        "Programa de inicia√ß√£o cient√≠fica"
    ],
    "calendario": "Procure a escola para mais informa√ß√µes",
    "valores": "A escola n√£o cobra mensalidade e fornece material did√°tico gratuitamente, uniformes s√£o pagos",
    "atividades_extracurriculares": [
        "Esportes", "Programas de extens√£o", "Clube de F√≠sica",
        "Extens√£o em m√∫sica", "Xadrez", "Ensino de L√≠nguas"
    ],
    "infraestrutura": [
        "Laborat√≥rios equipados de ci√™ncias, inform√°tica e rob√≥tica",
        "Biblioteca",
        "Quadra poliesportiva coberta",
        "Ensino de L√≠nguas",
        "Programa de inicia√ß√£o cient√≠fica"
    ],
    "Cursos": [
        "Ensino M√©dio T√©cnico: Automa√ß√£o Industrial, Manuten√ß√£o Automotiva, Produ√ß√£o Cultural e Seguran√ßa do Trabalho",
        "Cursos T√©cnicos Subsequentes: Seguran√ßa do Trabalho e Sistemas de Energias Renov√°veis",
        "Bacharelado: Sistemas de Informa√ß√£o"
    ]
}

REGRAS = """
1. Seja DIRETO e OBJETIVO em todas as respostas
2. Responda APENAS o que foi perguntado, n√£o adicione informa√ß√µes extras
3. Use SOMENTE as informa√ß√µes fornecidas acima
4. Se n√£o entender a pergunta ou ela n√£o for sobre a escola, responda EXATAMENTE: "N√£o entendi sua pergunta, voc√™ pode ter se expressado mal ou eu n√£o tenho essas informa√ß√µes salvas em meu banco de dados. Pode reformular? (Caso n√£o seja um erro, entre em contato com a SERAC pelo email: serac.mariadagraca@cefet-rj.br)"
5. Caso a pergunta for sobre algo relacionado √† escola mas n√£o souber a resposta, responda EXATAMENTE: "N√£o tenho ainda essa informa√ß√£o, favor falar com a SERAC (email: serac.mariadagraca@cefet-rj.br)"
6. NUNCA d√™ respostas incompletas ou vagas
7. Respostas devem caber em mensagens de WhatsApp (m√°x. 1600 caracteres)
8. Responda sempre em portugu√™s
9. Jamais inicie com "bom dia" ou similares se o usu√°rio n√£o cumprimentar primeiro
10. Se o usu√°rio cumprimentar, cumprimente da mesma forma e depois pergunte: "Em que posso ajud√°-lo?"
11. Mensagens sem sentido (s√≥ s√≠mbolos, caracteres) devem receber a mensagem de erro
12. NUNCA responda apenas com frases como "mensagem de erro" ou "mensagem de n√£o conhecimento" - sempre use as mensagens completas especificadas
13. Responda o usu√°rio com base no idioma que ele falou contigo, se ele falou em portugu√™s, responda em portugu√™s, se foi em ingl√™s, responda em ingl√™s, e por a√≠ vai com todos os idiomas poss√≠veis.
14. Todos os servi√ßos que a escola oferece, traduza-os para cada idioma, exemplo: "Ensino M√©dio", caso for em ingl√™s, vira - "High School" - e por a√≠ vai. POR√âM, NUNCA TRADUZA O NOME DE INSTITUI√á√ïES/LUGARES - MARIA DA GRA√áA CONTINUA SENDO MARIA DA GRA√áA E SERAC E CEFET CONTINUAM IGUAIS.
"""

PROMPT_BASE = f"""
Voc√™ √© um atendente virtual do {COLEGIO_INFO['nome']}. Responda como um assistente de atendimento.
Siga as instru√ß√µes abaixo SEMPRE, sem exce√ß√£o:

INFORMA√á√ïES:
{COLEGIO_INFO}

REGRAS:
{REGRAS}

Agora, responda √† seguinte pergunta do usu√°rio:
"""

# Fun√ß√µes utilit√°rias
def mensagem_invalida(texto):
    if not texto or not texto.strip(): return True
    txt = texto.strip()
    if re.fullmatch(r'[^a-zA-Z√Ä-√ø0-9]+', txt): return True
    if len(txt) <= 1 and not re.search(r'[a-zA-Z√Ä-√ø]', txt): return True
    return False

def interpretar_e_responder(pergunta):
    throttle()
    
    # 1. Detecta o idioma (nova funcionalidade)
    idioma = detectar_idioma(pergunta)
    logging.info(f"üåê Idioma detectado: {idioma}")
    
    # 2. Prepara o prompt com instru√ß√£o de idioma
    prompt = PROMPT_BASE + f"\n\nIDIOMA DA RESPOSTA: {idioma}\nPERGUNTA: {pergunta}"
    
    try:
        resposta = chat.send_message(prompt)
        texto = resposta.text.strip()
        
        # 3. Mant√©m as verifica√ß√µes originais de mensagens inadequadas
        if texto.lower() in ["mensagem de erro", "mensagem de n√£o conhecimento"]:
            texto = MENSAGEM_ERRO_TEXTO if "mensagem de erro" in texto.lower() else MENSAGEM_NAO_CONHECIMENTO
        
        # 4. Limita tamanho e faz log (como antes)
        resposta_final = texto[:1597] + "..." if len(texto) > 1600 else texto
        logging.info(f"üí¨ RESPOSTA ENVIADA: '{resposta_final}'")
        
        return resposta_final
        
    except Exception as e:
        logging.error(f"Erro ao processar resposta do Gemini: {e}")
        logging.info(f"üí¨ RESPOSTA ENVIADA (ERRO): '{MENSAGEM_ERRO_SISTEMA}'")
        return MENSAGEM_ERRO_SISTEMA
    
    
def convert_ogg_to_wav_ffmpeg(ogg_data):
    """
    Converte dados OGG para WAV usando FFmpeg.
    """
    try:
        # Criar arquivo tempor√°rio para entrada
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as input_file:
            input_file.write(ogg_data)
            input_path = input_file.name
        
        # Criar arquivo tempor√°rio para sa√≠da
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as output_file:
            output_path = output_file.name
        
        # Executar FFmpeg
        cmd = [
            'ffmpeg', '-i', input_path, 
            '-acodec', 'pcm_s16le', 
            '-ac', '1', 
            '-ar', '16000', 
            '-y', output_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            # Ler arquivo convertido
            with open(output_path, 'rb') as f:
                wav_data = f.read()
            logging.info("Convers√£o OGG->WAV bem-sucedida com FFmpeg")
            return wav_data
        else:
            logging.error(f"Erro no FFmpeg: {result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        logging.error("Timeout na convers√£o FFmpeg")
        return None
    except Exception as e:
        logging.error(f"Erro na convers√£o FFmpeg: {e}")
        return None
    finally:
        # Limpar arquivos tempor√°rios
        try:
            os.unlink(input_path)
            os.unlink(output_path)
        except:
            pass
        
def detectar_idioma(texto):
    """Detecta o idioma do texto usando Gemini"""
    try:
        prompt = f"Identifique o idioma deste texto (responda APENAS com sigla: 'pt', 'en', 'es', 'fr', 'ar', etc.):\n{texto}"
        resposta = model.generate_content(prompt)
        return resposta.text.strip().lower()
    except:
        return "pt"  # padr√£o: portugu√™s se falhar

def convert_ogg_to_wav_pure_python(ogg_data):
    """
    Converte dados OGG para WAV usando apenas Python puro.
    """
    try:
        # Tentar detectar se √© um arquivo WAV disfar√ßado
        if ogg_data.startswith(b'RIFF') and b'WAVE' in ogg_data[:20]:
            logging.info("Arquivo j√° est√° em formato WAV")
            return ogg_data
        
        # Para arquivos OGG, tentar extrair usando t√©cnicas b√°sicas
        if ogg_data.startswith(b'OggS'):
            logging.info("Detectado arquivo OGG - tentando convers√£o b√°sica")
            # Implementa√ß√£o muito b√°sica - pode n√£o funcionar com todos os OGG
            return None
        
        logging.warning("Formato de √°udio n√£o reconhecido")
        return None
        
    except Exception as e:
        logging.error(f"Erro na convers√£o b√°sica: {e}")
        return None

def process_audio_with_wave(audio_data):
    """
    Processa √°udio usando apenas a biblioteca wave do Python.
    """
    try:
        audio_file = io.BytesIO(audio_data)
        
        with wave.open(audio_file, 'rb') as wav_file:
            channels = wav_file.getnchannels()
            sample_width = wav_file.getsampwidth()
            frame_rate = wav_file.getframerate()
            frames = wav_file.readframes(wav_file.getnframes())
            
            logging.info(f"√Åudio WAV - Canais: {channels}, Sample Width: {sample_width}, Frame Rate: {frame_rate}")
            
            # Converter para mono se necess√°rio
            if channels == 2:
                frames = audioop.tomono(frames, sample_width, 1, 1)
                channels = 1
            
            # Converter para 16kHz se necess√°rio
            if frame_rate != 16000:
                frames = audioop.ratecv(frames, sample_width, channels, frame_rate, 16000, None)[0]
                frame_rate = 16000
            
            # Criar novo arquivo WAV em mem√≥ria
            output = io.BytesIO()
            with wave.open(output, 'wb') as out_wav:
                out_wav.setnchannels(channels)
                out_wav.setsampwidth(sample_width)
                out_wav.setframerate(frame_rate)
                out_wav.writeframes(frames)
            
            return output.getvalue()
            
    except wave.Error as e:
        logging.error(f"Erro ao processar WAV: {e}")
        return None
    except Exception as e:
        logging.error(f"Erro inesperado no processamento: {e}")
        return None

def transcrever_audio(media_url):
    """
    Requer bin√°rio 'ffmpeg' ou 'ffmpeg.exe' na mesma pasta.
    """
    try:
        logging.info(f"Iniciando transcri√ß√£o com FFmpeg: {media_url}")

        # Caminho local para ffmpeg
        FFMPEG_EXEC = "ffmpeg.exe" if os.name == "nt" else "./ffmpeg"

        # Baixar o √°udio
        response = requests.get(
            media_url,
            headers={'User-Agent': 'Mozilla/5.0'},
            auth=(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN),
            timeout=30
        )
        response.raise_for_status()

        if not response.content:
            logging.warning("‚ö†Ô∏è √Åudio vazio.")
            return None

        # Salvar .ogg tempor√°rio
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
            ogg_file.write(response.content)
            ogg_path = ogg_file.name

        # Criar .wav tempor√°rio
        wav_path = ogg_path.replace(".ogg", ".wav")

        # Converter com FFmpeg local
        cmd = [
            FFMPEG_EXEC,
            '-y', '-i', ogg_path,
            '-ar', '16000', '-ac', '1',
            '-acodec', 'pcm_s16le',
            wav_path
        ]
        result = subprocess.run(cmd, capture_output=True)

        if result.returncode != 0:
            logging.error(f"‚ùå FFmpeg falhou: {result.stderr.decode(errors='ignore')}")
            return None

        # Transcrever com speech_recognition
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            recognizer.adjust_for_ambient_noise(source, duration=0.5)
            audio_data = recognizer.record(source)

        for lang in ["pt-BR", "pt-PT", "en-US"]:
            try:
                texto = recognizer.recognize_google(audio_data, language=lang).strip()
                if not texto or mensagem_invalida(texto):
                    logging.warning(f"üü° √Åudio transcrito ({lang}) mas vazio ou inv√°lido: '{texto}'")
                    return "AUDIO_INV√ÅLIDO"  # c√≥digo especial
                logging.info(f"‚úÖ Transcri√ß√£o OK ({lang}): {texto}")
                return texto
            except sr.UnknownValueError:
                logging.warning(f"ü§∑ N√£o entendeu em {lang}")
            except sr.RequestError as e:
                logging.error(f"Erro Google STT ({lang}): {e}")


        return "FALHA_TECNICA"

    except Exception as e:
        logging.error(f"üí• Erro na transcri√ß√£o: {e}")
        return None
    finally:
        try:
            os.unlink(ogg_path)
            os.unlink(wav_path)
        except:
            pass
            

# Inicializa Flask
app = Flask(__name__)

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        msg_body = request.values.get("Body", "").strip()
        num_media = int(request.values.get("NumMedia", 0))

        logging.info(f"üîÑ Webhook chamado - Body: '{msg_body}', NumMedia: {num_media}")

        if num_media > 0:
            media_url = request.values.get("MediaUrl0")
            content_type = request.values.get("MediaContentType0", "")

            logging.info(f"üéµ M√≠dia recebida - URL: {media_url}, Tipo: {content_type}")

            if content_type.startswith("audio"):
                transcricao = transcrever_audio(media_url)

                if transcricao == "AUDIO_INV√ÅLIDO":
                    resposta_final = MENSAGEM_ERRO_AUDIO
                    logging.warning("üü° √Åudio transcrito mas sem conte√∫do √∫til.")
                    logging.info(f"üí¨ RESPOSTA ENVIADA (AUDIO INV√ÅLIDO): '{resposta_final}'")

                elif transcricao:
                    resposta_final = interpretar_e_responder(transcricao)
                    logging.info(f"‚úÖ Transcri√ß√£o bem-sucedida: '{transcricao}'")

                    if resposta_final == MENSAGEM_ERRO_TEXTO:
                        resposta_final = MENSAGEM_ERRO_AUDIO
                        logging.info("üí¨ RESPOSTA ENVIADA (AUDIO FORA DO ESCOPO): " + resposta_final)

                else:
                    resposta_final = MENSAGEM_ERRO_TRANSCRICAO
                    logging.warning("‚ùå Falha t√©cnica na transcri√ß√£o do √°udio")
                    logging.info(f"üí¨ RESPOSTA ENVIADA (FALHA TRANSCRI√á√ÉO): '{resposta_final}'")

            else:
                resposta_final = "Desculpe, s√≥ consigo entender √°udios de voz ou mensagens de texto."
                logging.info(f"üí¨ RESPOSTA ENVIADA (TIPO M√çDIA): '{resposta_final}'")

        elif mensagem_invalida(msg_body):
            resposta_final = MENSAGEM_ERRO_TEXTO
            logging.info("‚ùå Mensagem de texto inv√°lida")
            logging.info(f"üí¨ RESPOSTA ENVIADA (TEXTO INV√ÅLIDO): '{resposta_final}'")

        else:
            resposta_final = interpretar_e_responder(msg_body)
            logging.info(f"üìù Mensagem de texto processada: '{msg_body}'")

        # Enviar resposta pelo WhatsApp e imprimir no terminal
        resp = MessagingResponse()
        resp.message(resposta_final)
        print(f"üì§ RESPOSTA AO USU√ÅRIO: {resposta_final}")
        return str(resp), 200, {'Content-Type': 'text/xml; charset=utf-8'}

    except Exception as e:
        logging.error(f"üí• ERRO CR√çTICO no webhook: {e}")
        resp = MessagingResponse()
        resp.message(MENSAGEM_ERRO_SISTEMA)
        logging.info(f"üí¨ RESPOSTA ENVIADA (ERRO CR√çTICO): '{MENSAGEM_ERRO_SISTEMA}'")
        return str(resp), 500, {'Content-Type': 'text/xml; charset=utf-8'}


if __name__ == "__main__":
    logging.info("üöÄ Bot iniciado!")
    
    app.run(host="0.0.0.0", port=5000, debug=True)